<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\pay_with_payula\Controller\PayulaController;
use Symfony\Component\HttpFoundation\Request;


/**
 * Implements hook_help().
 */
function pay_with_payula_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.pay_with_payula':

      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The <strong>Pay with PayU Latam module</strong> is used to create a payment gateway that
        allows you to configure your Drupal Commerce store for the use of the
        <em>PayU Latam</em> payment provider.') . '</p>';
      $output .= '<h3>' . t('Important') . '</h3>';
      $output .= '<dl>';
      $output .= '<p>' . t('When configuring the new payment gateway you must make sure to create it
        with the name of <strong>PayU LA</strong> so that the machine name is <em>payu_la</em>. <strong>This is mandatory</strong>.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_cron().
 */

function pay_with_payula_cron () {

  $payula = new PayulaController; 
  
  $client = \Drupal::httpClient();
  
  $paymentPlugin =  \Drupal::config('commerce_payment.commerce_payment_gateway.payu_la');
  $merchantId = $paymentPlugin->getOriginal()['configuration']['merchantId'];
  $apiKey = $paymentPlugin->getOriginal()['configuration']['apiKey'];
  $apiLogin = $paymentPlugin->getOriginal()['configuration']['apiLogin'];
  $urlReport = $paymentPlugin->getOriginal()['configuration']['urlReport'];

  $orders = \Drupal::entityTypeManager()
  ->getStorage('commerce_order')
  ->loadByProperties([
    'state' => 'draft',
    'locked' => 1,
  ]);

  /**Recorre las ordenes pendientes */
  
  foreach ($orders as $order){

    $res = $client->post(
      $urlReport,
      [
        'json' => [
          'test'=>false,
          'language'=>'es',
          'command'=> 'ORDER_DETAIL_BY_REFERENCE_CODE',
          'merchant' =>[
            'apiLogin'=>$apiLogin,
            'apiKey'=>$apiKey,
          ],
          'details'=>[
            'referenceCode'=> $order->id()
          ],
        ],
      ],
    );

    $body =  simplexml_load_string($res->getBody());
    $json = json_encode($body);
    $arr = json_decode($json, true);
    
    /**Pregunta si se pago la orden */
    if($res->getStatusCode() == 200 
      && $arr['result']['payload']['order']['transactions']
        ['transaction']['transactionResponse']['state'] == 'APPROVED') {
      
      $value = $order->getTotalPrice()->getNumber();
      $currency = $order->getTotalPrice()->getCurrencyCode();
      
      $valArray = explode('.', $value);
      $decPart='';
      if (isset($valArray[1])) {
        $decPart = substr($valArray[1],1,1) != '0' ? substr($valArray[1],0,2) : substr($valArray[1],0,1) ;
      }
      $valNew = $decPart != '' ? $valArray[0] . '.' . $decPart : $valArray[0];

      $sign = md5(
        $apiKey . '~' .
        $merchantId . '~' .
        $order->id() . '~' .
        $valNew . '~' .
        $currency . '~' .
        '4'
      );

      /**Para actualizar cuando el pago es correcto */
      $path = "/confirmPayuLA?value=$value&currency=$currency&reference_sale="
        .$order->id()."&sign=$sign&state_pol=4&merchant_id=$merchantId";

      $request = Request::create(
        $path,
        'POST',
      );
      $payula->onNotify($request);
    }
  }

}